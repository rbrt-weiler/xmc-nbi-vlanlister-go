image: golang:1.14



stages:
  - build
  - test
  - deploy



before_script:
  - mkdir -p binaries

after_script:
  - ls -l binaries

# do not forget to set project variables
include:
  - template: SAST.gitlab-ci.yml # GITLAB_FEATURES = "sast"
  - template: Code-Quality.gitlab-ci.yml # GITLAB_FEATURES = "code_quality"
  - template: Dependency-Scanning.gitlab-ci.yml # GITLAB_FEATURES = "dependency_scanning"
  - template: License-Scanning.gitlab-ci.yml # GITLAB_FEATURES = "license_scanning"

variables:
  SAST_DISABLE_DIND: "true"
  SAST_GOSEC_LEVEL: 0



.build_command: &build_command
- go build -o binaries/VlanLister ./...

.build_command_release: &build_command_release
- GOOS=linux GOARCH=amd64 go build -o binaries/VlanLister_${CI_COMMIT_TAG}_${CI_COMMIT_SHORT_SHA}_linux-amd64 ./...
- GOOS=windows GOARCH=amd64 go build -o binaries/VlanLister_${CI_COMMIT_TAG}_${CI_COMMIT_SHORT_SHA}_win-amd64.exe ./...
- GOOS=darwin GOARCH=amd64 go build -o binaries/VlanLister_${CI_COMMIT_TAG}_${CI_COMMIT_SHORT_SHA}_darwin-amd64 ./...

.test_command: &test_command
- ./binaries/VlanLister -version

.release_command: &release_command
- rm binaries/VlanLister
- ln -s binaries VlanLister_${CI_COMMIT_TAG}



build-master:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
      allow_failure: true
  cache:
    key: "dev-$CI_COMMIT_SHA"
    paths:
      - binaries
  script:
    - *build_command
  allow_failure: true

test-master:
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
      allow_failure: true
  cache:
    key: "dev-$CI_COMMIT_SHA"
    paths:
      - binaries
  script:
    - *test_command
  allow_failure: true



build-stable:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == "stable"
      when: always
  cache:
    key: "staging-$CI_COMMIT_SHA"
    paths:
      - binaries
  script:
    - *build_command

test-stable:
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == "stable"
      when: on_success
  cache:
    key: "staging-$CI_COMMIT_SHA"
    paths:
      - binaries
  script:
    - *test_command
  artifacts:
    when: on_success
    expire_in: 30 minutes
    name: "VlanLister_${CI_COMMIT_SHORT_SHA}"
    paths:
      - binaries/*



build-tagged:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: always
  cache:
    key: "release-$CI_COMMIT_SHA"
    paths:
      - binaries
  script:
    - *build_command
    - *build_command_release

test-tagged:
  stage: test
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
  cache:
    key: "release-$CI_COMMIT_SHA"
    paths:
      - binaries
  script:
    - *test_command

deploy-tagged:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
  cache:
    key: "release-$CI_COMMIT_SHA"
    paths:
      - binaries
  script:
    - *release_command
  artifacts:
    when: on_success
    name: "VlanLister_${CI_COMMIT_TAG}"
    paths:
      - VlanLister_${CI_COMMIT_TAG}/*
