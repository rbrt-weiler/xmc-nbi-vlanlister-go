image: golang:1.16



stages:
  - build
  - test
  - deploy



after_script:
  - ls -lR .

# do not forget to set project variables
include:
  - template: SAST.gitlab-ci.yml # GITLAB_FEATURES = "sast"
  - template: Code-Quality.gitlab-ci.yml # GITLAB_FEATURES = "code_quality"
  - template: Dependency-Scanning.gitlab-ci.yml # GITLAB_FEATURES = "dependency_scanning"
  - template: License-Scanning.gitlab-ci.yml # GITLAB_FEATURES = "license_scanning"

variables:
  TOOL_NAME: "VlanLister"
  SAST_DISABLE_DIND: "true"
  SAST_GOSEC_LEVEL: 0



.build_command: &build_command
- CGO=0 make build

.build_command_release: &build_command_release
- CGO=0 VERSION="${CI_COMMIT_TAG}" make -j8 release

.test_command: &test_command
- CGO=0 make test

.release_command: &release_command
- ln -s out/${TOOL_NAME}_${CI_COMMIT_TAG} ${TOOL_NAME}_${CI_COMMIT_TAG}



build-master:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
  cache:
    key: "master-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *build_command
  allow_failure: true

test-master:
  stage: test
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
  cache:
    key: "master-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *test_command
  allow_failure: true
  artifacts:
    when: on_success
    expire_in: 30 minutes
    name: "${TOOL_NAME}_${CI_COMMIT_SHORT_SHA}_master"
    paths:
      - out/*



build-stable:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: always
  cache:
    key: "stable-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *build_command_release

test-stable:
  stage: test
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: on_success
  cache:
    key: "stable-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *test_command
  artifacts:
    when: on_success
    expire_in: 60 minutes
    name: "${TOOL_NAME}_${CI_COMMIT_SHORT_SHA}_stable"
    paths:
      - out/*



build-tagged:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
  cache:
    key: "release-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *build_command_release

test-tagged:
  stage: test
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
  cache:
    key: "release-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *test_command

deploy-tagged:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
  cache:
    key: "release-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *release_command
  artifacts:
    when: on_success
    expire_in: never
    name: "${TOOL_NAME}_${CI_COMMIT_TAG}"
    paths:
      - ${TOOL_NAME}_${CI_COMMIT_TAG}/*



build-any:
  stage: build
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always
      allow_failure: true
  cache:
    key: "dev-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *build_command

test-any:
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "stable"'
      when: never
    - if: '$CI_COMMIT_TAG'
      when: never
    - when: always
      allow_failure: true
  cache:
    key: "dev-$CI_COMMIT_SHA"
    paths:
      - out
  script:
    - *test_command
  artifacts:
    when: on_success
    expire_in: 15 minutes
    name: "${TOOL_NAME}_${CI_COMMIT_SHORT_SHA}_dev"
    paths:
      - out/*
